file "$(TOP)/USB1608G_2AO_V2App/Db/measCompDevice.template"
{pattern {} {} }

file "$(TOP)/USB1608G_2AO_V2App/Db/measCompLongIn.template"
{
pattern
{ R,   MASK, ADDR}
{Li,   0xFF,    0}
}

file "$(TOP)/USB1608G_2AO_V2App/Db/measCompBinaryIn.template"
{
pattern
{ R,   MASK, ADDR}
{Bi1,  0x01     0}
{Bi2,  0x02     0}
{Bi3,  0x04     0}
{Bi4,  0x08     0}
{Bi5,  0x10     0}
{Bi6,  0x20     0}
{Bi7,  0x40     0}
{Bi8,  0x80     0}
}

file "$(TOP)/USB1608G_2AO_V2App/Db/measCompLongOut.template"
{
pattern
{ R,   MASK, ADDR}
{Lo,   0xFF,    0}
}

file "$(TOP)/USB1608G_2AO_V2App/Db/measCompBinaryOut.template"
{
pattern
{ R,   MASK, ADDR}
{Bo1,  0x01     0}
{Bo2,  0x02     0}
{Bo3,  0x04     0}
{Bo4,  0x08     0}
{Bo5,  0x10     0}
{Bo6,  0x20     0}
{Bo7,  0x40     0}
{Bo8,  0x80     0}
}

# Direction bits on binary I/O
#  VAL 0=input, 1=output
file "$(TOP)/USB1608G_2AO_V2App/Db/measCompBinaryDir.template"
{
pattern
{ R,   MASK,  VAL, ADDR}
{Bd1,  0x01    0,     0}
{Bd2,  0x02    0,     0}
{Bd3,  0x04    0,     0}
{Bd4,  0x08    0,     0}
{Bd5,  0x10    1,     0}
{Bd6,  0x20    1,     0}
{Bd7,  0x40    1,     0}
{Bd8,  0x80    1,     0}
}

file "$(TOP)/USB1608G_2AO_V2App/Db/measCompPulseGen.template"
{
pattern
{    R,      ADDR,  PREC}
{PulseGen1,     0,     4}
}

file "$(TOP)/USB1608G_2AO_V2App/Db/measCompCounter.template"
{
pattern
{    R,     ADDR}
{Counter1,     0}
{Counter2,     1}
}

# Analog input mode
file "$(TOP)/USB1608G_2AO_V2App/Db/measCompAnalogInMode.template"
{
pattern
{  R,       ADDR,   MODE}
{AiMode,       0,      0}
}

# Analog inputs
file "$(TOP)/USB1608G_2AO_V2App/Db/measCompAnalogIn.template"
{
pattern
{  R, ADDR, EGUL, LOPR, EGUF, HOPR,  RANGE,   SCAN,   PREC}
{Ai1,   0,  -10., -10.,  10.,  10.,    0,  "1 second",   4}
{Ai2,   1,  -10., -10.,  10.,  10.,    0,  "1 second",   4}
{Ai3,   2,   -5.,  -5.,   5.,   5.,    1,  "1 second",   4}
{Ai4,   3,   -5.,  -5.,   5.,   5.,    1,  "1 second",   4}
{Ai5,   4,   -2.,  -2.,   2.,   2.,    2,  "1 second",   4}
{Ai6,   5,   -2.,  -2.,   2.,   2.,    2,  "1 second",   4}
{Ai7,   6,   -1.,  -1.,   1.,   1.,    3,  "1 second",   4}
{Ai8,   7,   -1.,  -1.,   1.,   1.,    3,  "1 second",   4}
}

# Waveform digitzer
file "$(TOP)/USB1608G_2AO_V2App/Db/measCompWaveformDig.template"
{
pattern
{  R,     ADDR,  PREC}
{WaveDig,    0,     4}
}

file "$(TOP)/USB1608G_2AO_V2App/Db/measCompWaveformDigN.template"
{
pattern
{  R,        ADDR,  PREC}
{WaveDig1,     0,      4}
{WaveDig2,     1,      4}
{WaveDig3,     2,      4}
{WaveDig4,     3,      4}
{WaveDig5,     4,      4}
{WaveDig6,     5,      4}
{WaveDig7,     6,      4}
{WaveDig8,     7,      4}
}


# Analog outputs
file "$(TOP)/USB1608G_2AO_V2App/Db/measCompAnalogOut.template"
{
pattern
{ R,   VAL, ADDR, EGUL, DRVL, LOPR, EGUF, DRVH, HOPR, PREC}
{Ao1,   0,    0,  -10., -10., -10.,  10.,  10.,  10.,    4}
{Ao2,   0,    1,  -10., -10., -10.,  10.,  10.,  10.,    4}
}

# Waveform generator
file "$(TOP)/USB1608G_2AO_V2App/Db/measCompWaveformGen.template"
{
pattern
{  R,        ADDR,  PREC}
{WaveGen,      0,      4}
}
file "$(TOP)/USB1608G_2AO_V2App/Db/measCompWaveformGenN.template"
{
pattern
{  R,        ADDR,  PREC}
{WaveGen1,     0,      4}
{WaveGen2,     1,      4}
}

# Trigger
file "$(TOP)/USB1608G_2AO_V2App/Db/measCompTrigger.template"
{
pattern
{  R,   ADDR}
{Trig,     0}
}


# Threshold Logic Controller 인스턴스
# 각 아날로그 입력 채널에 대한 임계값 로직 제어
# ThresholdLogic1: ai1 -> bo5
# ThresholdLogic2: ai2 -> bo6
# ThresholdLogic3: ai4 -> bo7
# ThresholdLogic4: ai5 -> bo8
file "$(TOP)/USB1608G_2AO_V2App/Db/threshold_logic.template"
{
pattern
{ R,               IN_CH,  THRESHOLD, HYSTERESIS, ENABLE, UPDATE_RATE, PREC, EGU }
{ ThresholdLogic1, "Ai1",     2.5,       0.1,        1,      10.0,        3,   "V" }
{ ThresholdLogic2, "Ai2",     5.0,       0.2,        1,      10.0,        3,   "V" }
{ ThresholdLogic3, "Ai3",     1.0,       0.05,       0,      5.0,         3,   "V" }
{ ThresholdLogic4, "Ai4",     7.5,       0.3,        0,      20.0,        3,   "V" }
}

