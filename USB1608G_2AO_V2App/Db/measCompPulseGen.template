# This database is loaded for each pulse generator
# Mark Rivers
# July 26, 2011

###################################################################
#  Pulse start/stop                                               # 
###################################################################
record(bo, "$(P)$(R)Run")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR))PULSE_RUN")
    field(ZNAM, "Stop")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Run")
    field(OSV,  "MINOR")
}

# NOTE: The records for the period and the frequency are a bit
# complex because we want to be able to change either ao record
# and have the other one update

###################################################################
#  Pulse period                                                   # 
###################################################################
record(ao, "$(P)$(R)Period")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR))PULSE_PERIOD")
    field(VAL,  "0.001")
    field(PREC, "$(PREC)")
    field(FLNK, "$(P)$(R)CalcFrequency")
}

record(ai, "$(P)$(R)Period_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR))PULSE_PERIOD")
    field(PREC, "$(PREC)")
    field(SCAN, "I/O Intr")
}

###################################################################
#  Calculate frequency based on new period                        # 
###################################################################
record(calcout, "$(P)$(R)CalcFrequency")
{
    field(INPA, "$(P)$(R)Period")
    field(CALC, "1/A")
    field(SDIS, "$(P)$(R)Frequency.PROC")
    field(DISV, "1")
    field(OUT, "$(P)$(R)Frequency PP MS")
}

###################################################################
#  Pulse frequency                                                # 
###################################################################
record(ao, "$(P)$(R)Frequency")
{
    field(PREC, "$(PREC)")
    field(FLNK, "$(P)$(R)CalcPeriod PP MS")
}

record(calc, "$(P)$(R)Frequency_RBV")
{
    field(INPA, "$(P)$(R)Period_RBV CP MS")
    field(CALC, "1/A")
    field(PREC, "$(PREC)")
}

###################################################################
#  Calculate period based on new frequency                        # 
###################################################################
record(calcout, "$(P)$(R)CalcPeriod")
{
    field(INPA, "$(P)$(R)Frequency")
    field(CALC, "1/A")
    field(SDIS, "$(P)$(R)Period.PROC")
    field(DISV, "1")
    field(OUT, "$(P)$(R)Period PP MS")
}

###################################################################
#  Pulse duty cycle                                               # 
###################################################################
record(ao, "$(P)$(R)DutyCycle")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR))PULSE_DUTY_CYCLE")
    field(VAL,  "0.5")
    field(PREC, "$(PREC)")
    field(FLNK, "$(P)$(R)CalcWidth")
}

record(ai, "$(P)$(R)DutyCycle_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR))PULSE_DUTY_CYCLE")
    field(PREC, "$(PREC)")
    field(SCAN, "I/O Intr")
}

###################################################################
#  Calculate width based on new duty cycle                        # 
###################################################################
record(calcout, "$(P)$(R)CalcWidth")
{
    field(INPA, "$(P)$(R)DutyCycle")
    field(INPB, "$(P)$(R)Period")
    field(CALC, "A*B")
    field(SDIS, "$(P)$(R)Width.PROC")
    field(DISV, "1")
    field(OUT, "$(P)$(R)Width PP MS")
}

###################################################################
#  Pulse width                                                    # 
###################################################################
record(ao, "$(P)$(R)Width")
{
    field(PREC, "$(PREC)")
    field(FLNK, "$(P)$(R)CalcDutyCycle PP MS")
}

record(calc, "$(P)$(R)Width_RBV")
{
    field(INPA, "$(P)$(R)DutyCycle_RBV CP MS")
    field(INPB, "$(P)$(R)Period_RBV CP MS")
    field(CALC, "B*A")
    field(PREC, "$(PREC)")
}

###################################################################
#  Calculate duty cycle based on new width                        # 
###################################################################
record(calcout, "$(P)$(R)CalcDutyCycle")
{
    field(INPA, "$(P)$(R)Width")
    field(INPB, "$(P)$(R)Period")
    field(CALC, "A/B")
    field(SDIS, "$(P)$(R)DutyCycle.PROC")
    field(DISV, "1")
    field(OUT, "$(P)$(R)DutyCycle PP MS")
}

###################################################################
#  Pulse delay                                                    # 
###################################################################
record(ao, "$(P)$(R)Delay")
{
    field(PINI, "YES")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT),$(ADDR))PULSE_DELAY")
    field(VAL,  "0.")
    field(PREC, "$(PREC)")
}

record(ai, "$(P)$(R)Delay_RBV")
{
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR))PULSE_DELAY")
    field(PREC, "$(PREC)")
    field(SCAN, "I/O Intr")
}

###################################################################
#  Pulse count                                                    # 
###################################################################
record(longout, "$(P)$(R)Count")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR))PULSE_COUNT")
}

###################################################################
#  Pulse idle state                                               # 
###################################################################
record(bo, "$(P)$(R)IdleState")
{
    field(PINI, "YES")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR))PULSE_IDLE_STATE")
    field(ZNAM, "Low")
    field(ONAM, "High")
    field(VAL,  "0")
}


